/*
 * The MIT License
 *
 * Copyright 2017 Kohwalter.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package br.uff.ic.provviewer;

import br.uff.ic.utility.graph.Edge;
import br.uff.ic.provviewer.GUI.GuiButtons;
import br.uff.ic.provviewer.GUI.GuiFunctions;
import br.uff.ic.provviewer.GUI.GuiInitialization;
import br.uff.ic.provviewer.GUI.GuiInference;
import br.uff.ic.provviewer.GUI.GuiReadFile;
import br.uff.ic.provviewer.GUI.GuiRun;
import br.uff.ic.utility.IO.BasePath;
import edu.uci.ics.jung.graph.DirectedGraph;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * Prov Viewer GUI. Can be used as a Template.
 * @author kohwalter
 */
public class GraphFrame extends javax.swing.JFrame {

    Variables variables = new Variables();

    /**
     * Creates new form GraphFrame
     * @param graph 
     */
    public GraphFrame() {
        variables = new Variables();
        System.out.println("Graph: " + BasePath.getBasePathForClass(GuiRun.class) + variables.demo);
        File graphFile = new File(BasePath.getBasePathForClass(GuiRun.class) + variables.demo);
        DirectedGraph<Object, Edge> graph = GuiReadFile.getGraph(graphFile);
        initComponents();
        GuiInitialization.initGraphComponent(variables, graph, this, Layouts, 
                displayAgentLabelButton.getState(), 
                displayActivityLabelButton.getState(), 
                displayEntityLabelButton.getState(), 
                displayTimeLabel.getState(), 
                displayID.getState());       
    }
    
    public GraphFrame(DirectedGraph<Object, Edge> graph) {
        variables = new Variables();
        initComponents();
        GuiInitialization.initGraphComponent(variables, graph, this, Layouts, 
                displayAgentLabelButton.getState(), 
                displayActivityLabelButton.getState(), 
                displayEntityLabelButton.getState(), 
                displayTimeLabel.getState(), 
                displayID.getState());       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        ToolMenu = new javax.swing.JPanel();
        CollapseAgent = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Expand = new javax.swing.JButton();
        Collapse = new javax.swing.JButton();
        MouseModes = new javax.swing.JComboBox();
        DisplayEdges = new javax.swing.JLabel();
        EdgeLineShapeSelection = new javax.swing.JComboBox();
        StatusFilterBox = new javax.swing.JComboBox();
        AttributeStatus = new javax.swing.JLabel();
        EdgeStyle = new javax.swing.JLabel();
        MouseModeLabel = new javax.swing.JLabel();
        EdgeTypes = new javax.swing.JScrollPane();
        edgeFilterList = new javax.swing.JList();
        Layouts = new javax.swing.JComboBox();
        GraphLayout = new javax.swing.JLabel();
        SimilarityInference = new javax.swing.JButton();
        FilterVertexMinValue = new javax.swing.JTextField();
        FilterVertexMaxValue = new javax.swing.JTextField();
        TemporalFilterToggle = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        VertexLabels = new javax.swing.JScrollPane();
        vertexFilterList = new javax.swing.JList();
        DisplayVertices = new javax.swing.JLabel();
        dbscanEpsilon = new javax.swing.JTextField();
        isSTDeps = new javax.swing.JCheckBox();
        simEpsilon = new javax.swing.JTextField();
        simStdSize = new javax.swing.JTextField();
        simStdInc = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        vertexShapeComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        vertexShapeBasedOnAttribute = new javax.swing.JTextField();
        layoutAttributeName_X_Text = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        layoutAttributeName_Y_Text = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenConfig = new javax.swing.JMenuItem();
        OpenGraph = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        autoDetectEdgesCheckBox = new javax.swing.JCheckBoxMenuItem();
        autoDetectAttributeCheckBox = new javax.swing.JCheckBoxMenuItem();
        useEdgeTypeColor = new javax.swing.JCheckBoxMenuItem();
        isStrokeByValueButton = new javax.swing.JCheckBoxMenuItem();
        isColorByEdgeValueButton = new javax.swing.JCheckBoxMenuItem();
        allowVariableLayoutButton = new javax.swing.JCheckBoxMenuItem();
        vertexBorderByGraphButton = new javax.swing.JCheckBoxMenuItem();
        PantoVertex = new javax.swing.JMenuItem();
        displayEdgeTextButton = new javax.swing.JMenu();
        displayID = new javax.swing.JCheckBoxMenuItem();
        displayTimeLabel = new javax.swing.JCheckBoxMenuItem();
        displayActivityLabelButton = new javax.swing.JCheckBoxMenuItem();
        displayAgentLabelButton = new javax.swing.JCheckBoxMenuItem();
        displayEntityLabelButton = new javax.swing.JCheckBoxMenuItem();
        displayEdgeText = new javax.swing.JCheckBoxMenuItem();
        jMenu6 = new javax.swing.JMenu();
        hideAgentVerticesButton = new javax.swing.JCheckBoxMenuItem();
        hideEntityVerticesButton = new javax.swing.JCheckBoxMenuItem();
        hideLonelyVerticesButton = new javax.swing.JCheckBoxMenuItem();
        hideAgentEdgesButton = new javax.swing.JCheckBoxMenuItem();
        hideMergedVerticesButton = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        mergeGraphButtom = new javax.swing.JMenuItem();
        exportGraphButton = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        temporalNanosecondsButton = new javax.swing.JCheckBoxMenuItem();
        temporalMicrosecondsButton = new javax.swing.JCheckBoxMenuItem();
        temporalMillisecondsButton = new javax.swing.JCheckBoxMenuItem();
        temporalSecondsButton = new javax.swing.JCheckBoxMenuItem();
        temporalMinutesButton = new javax.swing.JCheckBoxMenuItem();
        temporalHoursButton = new javax.swing.JCheckBoxMenuItem();
        temporalDaysButton = new javax.swing.JCheckBoxMenuItem();
        temporalWeeksButton = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        doDerivateButton = new javax.swing.JCheckBoxMenuItem();
        removeOutliersButton = new javax.swing.JCheckBoxMenuItem();
        jMenu5 = new javax.swing.JMenu();
        updateErrorButton = new javax.swing.JCheckBoxMenuItem();
        verifyWithinClusterButton = new javax.swing.JCheckBoxMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        attributeDisplaySimConfig = new javax.swing.JRadioButtonMenuItem();
        similarityConsiderNeighborsButton = new javax.swing.JCheckBoxMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("D:\\SVN\\Prov_Viewer\\prov-viewer\\src\\main\\resources"));
        fileChooser.setDialogTitle("This is my open dialog");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prov Viewer");
        setMinimumSize(new java.awt.Dimension(850, 0));

        ToolMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        CollapseAgent.setText("CollapseAgent");
        CollapseAgent.setToolTipText("Collapse all vertices from each agent");
        CollapseAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollapseAgentActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.setToolTipText("Reset the graph to the original format");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Expand.setText("Expand");
        Expand.setToolTipText("Remove the collapse from the selected vertex");
        Expand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpandActionPerformed(evt);
            }
        });

        Collapse.setText("Collapse");
        Collapse.setToolTipText("Collapse selected vertices");
        Collapse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollapseActionPerformed(evt);
            }
        });

        MouseModes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Transforming", "Picking" }));
        MouseModes.setToolTipText("Change the mouse function to select (Picking) or moving (Transforming)");
        MouseModes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MouseModesActionPerformed(evt);
            }
        });

        DisplayEdges.setText("Display Edge");

        EdgeLineShapeSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "QuadCurve", "Line" }));
        EdgeLineShapeSelection.setToolTipText("Change the edge's line format");
        EdgeLineShapeSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeLineShapeSelectionActionPerformed(evt);
            }
        });

        StatusFilterBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "Morale", "Stamina", "Hours", "Weekend", "Credits", "Role" }));
        StatusFilterBox.setToolTipText("Change vertex coloring to evaluate the selected attribute");
        StatusFilterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusFilterBoxActionPerformed(evt);
            }
        });

        AttributeStatus.setText("Attribute Status");

        EdgeStyle.setText("Edge Style");

        MouseModeLabel.setText("Mouse Mode");

        edgeFilterList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        edgeFilterList.setToolTipText("Edge filter: Display only the edges with selected labels");
        edgeFilterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                edgeFilterListValueChanged(evt);
            }
        });
        EdgeTypes.setViewportView(edgeFilterList);

        Layouts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Timeline", "Timeline (Graphs)", "One Dimensional", "Two Dimensional", "Hierarchy", "Temporal", "Spatial", "ProvCircle", "ProvCircle2", "Circle", "FR", "FR2", "ISOM", "KK", "Spring", "Dag" }));
        Layouts.setToolTipText("Change the graph layout");
        Layouts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LayoutsActionPerformed(evt);
            }
        });

        GraphLayout.setText("Graph Layout");

        SimilarityInference.setText("Similarity Collapse");
        SimilarityInference.setToolTipText("Collapse vertices using the Similarity Algorithm Make sure to load the configuration file before collapsing or selecting the \"Attribute Status Config\" option in the \"Similarity Collapse\" menu");
        SimilarityInference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimilarityInferenceActionPerformed(evt);
            }
        });

        FilterVertexMinValue.setText("0");
        FilterVertexMinValue.setToolTipText("Filter vertices by time (min value)");
        FilterVertexMinValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterVertexMinValueActionPerformed(evt);
            }
        });

        FilterVertexMaxValue.setText("100");
        FilterVertexMaxValue.setToolTipText("Filter vertices by time (max value)");
        FilterVertexMaxValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterVertexMaxValueActionPerformed(evt);
            }
        });

        TemporalFilterToggle.setText("Temporal Filter");
        TemporalFilterToggle.setToolTipText("Hide vertices outside the range below using the selected temporal scale (zero represents the lowest timestamp in the graph) or XMLGregorianCalendar format");
        TemporalFilterToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TemporalFilterToggleActionPerformed(evt);
            }
        });

        jButton1.setText("DBSCAN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        vertexFilterList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "All Vertices", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        vertexFilterList.setToolTipText("Vertex filter: Display only the vertices with selected labels");
        vertexFilterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                vertexFilterListValueChanged(evt);
            }
        });
        VertexLabels.setViewportView(vertexFilterList);

        DisplayVertices.setText("Display Vertices");

        dbscanEpsilon.setText("0.5");
        dbscanEpsilon.setToolTipText("DBSCAN Epsilon Value");
        dbscanEpsilon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbscanEpsilonActionPerformed(evt);
            }
        });

        isSTDeps.setText("Use STD eps");
        isSTDeps.setToolTipText("Define if the Eps will use the defined value or multiply the value to the std of the selected attribute");

        simEpsilon.setText("2.0");
        simEpsilon.setToolTipText("Defines the epsilon for the similarty algorithms (Float)");
        simEpsilon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simEpsilonActionPerformed(evt);
            }
        });

        simStdSize.setText("1");
        simStdSize.setToolTipText("Defines the minimim cluster size (before havings its own epsilon) for the similarty algorithms (Integer) and is used when VE is selected");

        simStdInc.setText("1.0");
        simStdInc.setToolTipText("Defines the epsilon multiplier used before reaching the minimum cluster size for the similarty algorithms (Float) and is used when VE is selected");

        jLabel1.setText("STD Epsilon");
        jLabel1.setToolTipText("Defines the eps value for the similarity algorithm");

        jLabel2.setText("Cluster Size");
        jLabel2.setToolTipText("Defines the minimum cluster size to be considered independent (used when VE is true)");

        jLabel3.setText("Eps Increase");
        jLabel3.setToolTipText("Defines the epsilon increase before reaching the minimum cluster size (used when VE is true)");

        vertexShapeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Graphs", "Attribute" }));
        vertexShapeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertexShapeComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Vertex Shape");

        jLabel5.setText("Vertex Attribute");

        vertexShapeBasedOnAttribute.setText("Timestamp");
        vertexShapeBasedOnAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertexShapeBasedOnAttributeActionPerformed(evt);
            }
        });

        layoutAttributeName_X_Text.setText("Timestamp");
        layoutAttributeName_X_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layoutAttributeName_X_TextActionPerformed(evt);
            }
        });

        jLabel6.setText("Layout X coord");

        layoutAttributeName_Y_Text.setText("Timestamp");
        layoutAttributeName_Y_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layoutAttributeName_Y_TextActionPerformed(evt);
            }
        });

        jLabel7.setText("Layout Y coord");

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ToolMenuLayout = new javax.swing.GroupLayout(ToolMenu);
        ToolMenu.setLayout(ToolMenuLayout);
        ToolMenuLayout.setHorizontalGroup(
            ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ToolMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vertexShapeComboBox, 0, 109, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(vertexShapeBasedOnAttribute))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DisplayEdges, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EdgeTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(VertexLabels, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(DisplayVertices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CollapseAgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Collapse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Expand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Reset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(simStdSize)
                            .addComponent(simEpsilon, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(simStdInc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dbscanEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SimilarityInference))
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ToolMenuLayout.createSequentialGroup()
                                .addComponent(FilterVertexMinValue, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FilterVertexMaxValue))
                            .addComponent(AttributeStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(StatusFilterBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TemporalFilterToggle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isSTDeps)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(GraphLayout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MouseModeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(EdgeStyle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(layoutAttributeName_Y_Text)
                    .addComponent(layoutAttributeName_X_Text)
                    .addComponent(MouseModes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Layouts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EdgeLineShapeSelection, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(574, 574, 574))
        );
        ToolMenuLayout.setVerticalGroup(
            ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolMenuLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Collapse)
                                    .addComponent(StatusFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(simEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Expand)
                                    .addComponent(TemporalFilterToggle)
                                    .addComponent(simStdSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(layoutAttributeName_X_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CollapseAgent)
                                .addComponent(AttributeStatus)
                                .addComponent(SimilarityInference))
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(MouseModes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MouseModeLabel))
                                .addGap(4, 4, 4)
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Layouts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(GraphLayout))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(FilterVertexMinValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(FilterVertexMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(simStdInc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2))
                            .addComponent(jLabel3)
                            .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(layoutAttributeName_Y_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1)
                                .addComponent(dbscanEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(isSTDeps)
                                .addComponent(Reset))
                            .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(EdgeLineShapeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EdgeStyle)))
                        .addContainerGap())
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DisplayEdges)
                            .addComponent(DisplayVertices)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addComponent(vertexShapeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vertexShapeBasedOnAttribute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ToolMenuLayout.createSequentialGroup()
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(EdgeTypes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(VertexLabels, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addContainerGap())))))
        );

        getContentPane().add(ToolMenu, java.awt.BorderLayout.PAGE_END);

        FileMenu.setText("File");

        OpenConfig.setText("Open Config File");
        OpenConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenConfigActionPerformed(evt);
            }
        });
        FileMenu.add(OpenConfig);

        OpenGraph.setText("Open Graph File");
        OpenGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenGraphActionPerformed(evt);
            }
        });
        FileMenu.add(OpenGraph);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        FileMenu.add(Exit);

        MenuBar.add(FileMenu);

        jMenu1.setText("Options");

        autoDetectEdgesCheckBox.setText("Auto Detect Edges");
        autoDetectEdgesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectEdgesCheckBoxActionPerformed(evt);
            }
        });
        jMenu1.add(autoDetectEdgesCheckBox);

        autoDetectAttributeCheckBox.setText("Auto Detect Attributes");
        autoDetectAttributeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectAttributeCheckBoxActionPerformed(evt);
            }
        });
        jMenu1.add(autoDetectAttributeCheckBox);

        useEdgeTypeColor.setText("Use Edge Type Color");
        useEdgeTypeColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useEdgeTypeColorActionPerformed(evt);
            }
        });
        jMenu1.add(useEdgeTypeColor);

        isStrokeByValueButton.setSelected(true);
        isStrokeByValueButton.setText("Edge Size based on its Value");
        isStrokeByValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isStrokeByValueButtonActionPerformed(evt);
            }
        });
        jMenu1.add(isStrokeByValueButton);

        isColorByEdgeValueButton.setSelected(true);
        isColorByEdgeValueButton.setText("Edge Color based on its Value");
        isColorByEdgeValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isColorByEdgeValueButtonActionPerformed(evt);
            }
        });
        jMenu1.add(isColorByEdgeValueButton);

        allowVariableLayoutButton.setText("Allow Layouts to Change by Filters");
        allowVariableLayoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowVariableLayoutButtonActionPerformed(evt);
            }
        });
        jMenu1.add(allowVariableLayoutButton);

        vertexBorderByGraphButton.setText("Vertex Border Color based on Graph");
        vertexBorderByGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertexBorderByGraphButtonActionPerformed(evt);
            }
        });
        jMenu1.add(vertexBorderByGraphButton);

        PantoVertex.setText("Pan to vertex");
        PantoVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PantoVertexActionPerformed(evt);
            }
        });
        jMenu1.add(PantoVertex);

        MenuBar.add(jMenu1);

        displayEdgeTextButton.setText("Display");

        displayID.setText("Display ID");
        displayID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayIDActionPerformed(evt);
            }
        });
        displayEdgeTextButton.add(displayID);

        displayTimeLabel.setText("Display Time");
        displayTimeLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTimeLabelActionPerformed(evt);
            }
        });
        displayEdgeTextButton.add(displayTimeLabel);

        displayActivityLabelButton.setText("Display Activity Vertex Label");
        displayActivityLabelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActivityLabelButtonActionPerformed(evt);
            }
        });
        displayEdgeTextButton.add(displayActivityLabelButton);

        displayAgentLabelButton.setText("Display Agent Vertex Label");
        displayAgentLabelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAgentLabelButtonActionPerformed(evt);
            }
        });
        displayEdgeTextButton.add(displayAgentLabelButton);

        displayEntityLabelButton.setText("Display Entity Vertex Label");
        displayEntityLabelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayEntityLabelButtonActionPerformed(evt);
            }
        });
        displayEdgeTextButton.add(displayEntityLabelButton);

        displayEdgeText.setText("Display Edge Text");
        displayEdgeText.setToolTipText("Display Edge Text in the format of \"type (label)\"");
        displayEdgeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayEdgeTextActionPerformed(evt);
            }
        });
        displayEdgeTextButton.add(displayEdgeText);

        MenuBar.add(displayEdgeTextButton);

        jMenu6.setText("Hide");

        hideAgentVerticesButton.setText("Hide Agent Vertices");
        hideAgentVerticesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideAgentVerticesButtonActionPerformed(evt);
            }
        });
        jMenu6.add(hideAgentVerticesButton);

        hideEntityVerticesButton.setText("Hide Entity Vertices");
        hideEntityVerticesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideEntityVerticesButtonActionPerformed(evt);
            }
        });
        jMenu6.add(hideEntityVerticesButton);

        hideLonelyVerticesButton.setText("Hide Lonely Vertices");
        hideLonelyVerticesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideLonelyVerticesButtonActionPerformed(evt);
            }
        });
        jMenu6.add(hideLonelyVerticesButton);

        hideAgentEdgesButton.setText("Hide Agent Edges");
        hideAgentEdgesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideAgentEdgesButtonActionPerformed(evt);
            }
        });
        jMenu6.add(hideAgentEdgesButton);

        hideMergedVerticesButton.setText("Hide Vertices in Common from All Graphs");
        hideMergedVerticesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideMergedVerticesButtonActionPerformed(evt);
            }
        });
        jMenu6.add(hideMergedVerticesButton);

        MenuBar.add(jMenu6);

        jMenu2.setText("Merge");

        jMenuItem1.setText("Merge Configuration");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        mergeGraphButtom.setText("Merge Graph With...");
        mergeGraphButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeGraphButtomActionPerformed(evt);
            }
        });
        jMenu2.add(mergeGraphButtom);

        exportGraphButton.setText("Export Graph");
        exportGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportGraphButtonActionPerformed(evt);
            }
        });
        jMenu2.add(exportGraphButton);

        MenuBar.add(jMenu2);

        jMenu3.setText("Temporal Scale");

        temporalNanosecondsButton.setText("Nanoseconds");
        temporalNanosecondsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalNanosecondsButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalNanosecondsButton);

        temporalMicrosecondsButton.setText("Microseconds");
        temporalMicrosecondsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalMicrosecondsButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalMicrosecondsButton);

        temporalMillisecondsButton.setSelected(true);
        temporalMillisecondsButton.setText("Milliseconds");
        temporalMillisecondsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalMillisecondsButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalMillisecondsButton);

        temporalSecondsButton.setText("Seconds");
        temporalSecondsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalSecondsButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalSecondsButton);

        temporalMinutesButton.setText("Minutes");
        temporalMinutesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalMinutesButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalMinutesButton);

        temporalHoursButton.setText("Hours");
        temporalHoursButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalHoursButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalHoursButton);

        temporalDaysButton.setText("Days");
        temporalDaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalDaysButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalDaysButton);

        temporalWeeksButton.setText("Week");
        temporalWeeksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temporalWeeksButtonActionPerformed(evt);
            }
        });
        jMenu3.add(temporalWeeksButton);

        MenuBar.add(jMenu3);

        jMenu4.setText("Color Scheme");

        doDerivateButton.setText("Derivative");
        doDerivateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doDerivateButtonActionPerformed(evt);
            }
        });
        jMenu4.add(doDerivateButton);

        removeOutliersButton.setText("Remove Outliers");
        removeOutliersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOutliersButtonActionPerformed(evt);
            }
        });
        jMenu4.add(removeOutliersButton);

        MenuBar.add(jMenu4);

        jMenu5.setText("Similarity Collapse");

        updateErrorButton.setText("Variable Epsilon (VE)");
        updateErrorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateErrorButtonActionPerformed(evt);
            }
        });
        jMenu5.add(updateErrorButton);

        verifyWithinClusterButton.setSelected(true);
        verifyWithinClusterButton.setText("Inter-cluster verification (IC)");
        verifyWithinClusterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyWithinClusterButtonActionPerformed(evt);
            }
        });
        jMenu5.add(verifyWithinClusterButton);

        jMenuItem2.setText("Similarity Configuration");
        jMenuItem2.setToolTipText("Loads the configuration file for the Similarity Collapse");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem2);

        attributeDisplaySimConfig.setSelected(true);
        attributeDisplaySimConfig.setText("Use Attribute Status Config");
        attributeDisplaySimConfig.setToolTipText("Will use the current attribute display schema being used to color the vertices for the similarity algorithm, evaluating only the displayed attribute");
        attributeDisplaySimConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeDisplaySimConfigActionPerformed(evt);
            }
        });
        jMenu5.add(attributeDisplaySimConfig);

        similarityConsiderNeighborsButton.setSelected(true);
        similarityConsiderNeighborsButton.setText("Consider only Neighbors");
        similarityConsiderNeighborsButton.setToolTipText("The neighborhood will be based on the graph's links (edges) if selected. Otherwise all vertices will be considered neighbors (used for clustering disconsidering the edges)");
        similarityConsiderNeighborsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similarityConsiderNeighborsButtonActionPerformed(evt);
            }
        });
        jMenu5.add(similarityConsiderNeighborsButton);

        MenuBar.add(jMenu5);

        setJMenuBar(MenuBar);

        setSize(new java.awt.Dimension(1126, 743));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * ================================================
     * Expand Button
     * ================================================
     */
    private void ExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpandActionPerformed
        GuiButtons.Expand(variables);
    }//GEN-LAST:event_ExpandActionPerformed
    /**
     * ================================================
     * Collapse Button
     * ================================================
     */
    private void CollapseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollapseActionPerformed
        GuiButtons.Collapse(variables);
    }//GEN-LAST:event_CollapseActionPerformed
    /**
     * ================================================
     * Reset Button
     * ================================================
     */
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        GuiButtons.Reset(variables);
    }//GEN-LAST:event_ResetActionPerformed
    /**
     * ================================================
     * Select Mouse mode Button
     * ================================================
     */
    private void MouseModesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MouseModesActionPerformed
        GuiButtons.MouseModes(variables.mouse, MouseModes);
    }//GEN-LAST:event_MouseModesActionPerformed
    /**
     * ================================================
     * Collapse Agent's processes
     * ================================================
     */
    private void CollapseAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollapseAgentActionPerformed
        GuiButtons.CollapseAgent(variables);
    }//GEN-LAST:event_CollapseAgentActionPerformed

   /**
         * ================================================
         * Edge Shape: Make it to be a line instead of quadratic curves
         * ================================================
         */
    private void EdgeLineShapeSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeLineShapeSelectionActionPerformed
        GuiButtons.EdgeLineMode(EdgeLineShapeSelection, variables);
    }//GEN-LAST:event_EdgeLineShapeSelectionActionPerformed

    /**
         * ================================================
         * Status Filter box
         * ================================================
         */
    private void StatusFilterBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusFilterBoxActionPerformed
        GuiButtons.StatusFilter(variables);
    }//GEN-LAST:event_StatusFilterBoxActionPerformed

   
    private void edgeFilterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_edgeFilterListValueChanged
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_edgeFilterListValueChanged

    private void LayoutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LayoutsActionPerformed
        GuiButtons.LayoutSelection(variables, Layouts);
    }//GEN-LAST:event_LayoutsActionPerformed

    private void OpenConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenConfigActionPerformed
        GuiReadFile.openConfigFile(variables, fileChooser, this, Layouts);
    }//GEN-LAST:event_OpenConfigActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        GuiButtons.Exit();
    }//GEN-LAST:event_ExitActionPerformed

    private void OpenGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenGraphActionPerformed
        GuiReadFile.openGraphFile(variables, fileChooser, this, Layouts);
    }//GEN-LAST:event_OpenGraphActionPerformed

    private void SimilarityInferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimilarityInferenceActionPerformed
        GuiInference.SimilarityCollapse(variables, updateErrorButton.getState(), verifyWithinClusterButton.getState());
    }//GEN-LAST:event_SimilarityInferenceActionPerformed

    private void FilterVertexMaxValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterVertexMaxValueActionPerformed
        // TODO add your handling code here:
        if(TemporalFilterToggle.isSelected())
            GuiButtons.Filter(variables);
    }//GEN-LAST:event_FilterVertexMaxValueActionPerformed

    private void FilterVertexMinValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterVertexMinValueActionPerformed
        // TODO add your handling code here:
        if(TemporalFilterToggle.isSelected())
            GuiButtons.Filter(variables);
    }//GEN-LAST:event_FilterVertexMinValueActionPerformed

    private void TemporalFilterToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TemporalFilterToggleActionPerformed
        // TODO add your handling code here:
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_TemporalFilterToggleActionPerformed

    private void autoDetectEdgesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectEdgesCheckBoxActionPerformed
        // TODO add your handling code here:
        GuiButtons.AutoDetectEdge(variables, autoDetectEdgesCheckBox.getState());
    }//GEN-LAST:event_autoDetectEdgesCheckBoxActionPerformed

    private void autoDetectAttributeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectAttributeCheckBoxActionPerformed
        // TODO add your handling code here:
        GuiButtons.AutoDetectVertexModes(variables, autoDetectAttributeCheckBox.getState());
    }//GEN-LAST:event_autoDetectAttributeCheckBoxActionPerformed

    private void displayEntityLabelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayEntityLabelButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.VertexLabel(variables, displayAgentLabelButton.getState(), displayActivityLabelButton.getState(), displayEntityLabelButton.getState(), displayTimeLabel.getState(), displayID.getState());
    }//GEN-LAST:event_displayEntityLabelButtonActionPerformed

    private void displayActivityLabelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActivityLabelButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.VertexLabel(variables, displayAgentLabelButton.getState(), displayActivityLabelButton.getState(), displayEntityLabelButton.getState(), displayTimeLabel.getState(), displayID.getState());
    }//GEN-LAST:event_displayActivityLabelButtonActionPerformed

    private void displayAgentLabelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAgentLabelButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.VertexLabel(variables, displayAgentLabelButton.getState(), displayActivityLabelButton.getState(), displayEntityLabelButton.getState(), displayTimeLabel.getState(), displayID.getState());
    }//GEN-LAST:event_displayAgentLabelButtonActionPerformed

    private void displayTimeLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTimeLabelActionPerformed
        // TODO add your handling code here:
        GuiButtons.VertexLabel(variables, displayAgentLabelButton.getState(), displayActivityLabelButton.getState(), displayEntityLabelButton.getState(), displayTimeLabel.getState(), displayID.getState());
    }//GEN-LAST:event_displayTimeLabelActionPerformed

    private void mergeGraphButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeGraphButtomActionPerformed
        // TODO add your handling code here:
        GuiReadFile.MergeGraph(variables, fileChooser, this, Layouts);
    }//GEN-LAST:event_mergeGraphButtomActionPerformed

    private void exportGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportGraphButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.ExportPROVN(variables);
    }//GEN-LAST:event_exportGraphButtonActionPerformed

    private void temporalMillisecondsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalMillisecondsButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("milliseconds", variables, false, false, true, false, false, false, 
                false, false, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);        
    }//GEN-LAST:event_temporalMillisecondsButtonActionPerformed

    private void temporalHoursButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalHoursButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("hours", variables, false, false, false, false, false, true, 
                false, false, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);
    }//GEN-LAST:event_temporalHoursButtonActionPerformed

    private void temporalDaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalDaysButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("days", variables, false, false, false, false, false, false, 
                true, false, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);
    }//GEN-LAST:event_temporalDaysButtonActionPerformed

    private void temporalWeeksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalWeeksButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("weeks", variables, false, false, false, false, false, false, 
                false, true, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);
    }//GEN-LAST:event_temporalWeeksButtonActionPerformed

    private void temporalMinutesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalMinutesButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("minutes", variables, false, false, false, false, true, false, 
                false, false, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);
    }//GEN-LAST:event_temporalMinutesButtonActionPerformed

    private void doDerivateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doDerivateButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.derivateScheme(variables, doDerivateButton.getState());
    }//GEN-LAST:event_doDerivateButtonActionPerformed

    private void removeOutliersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOutliersButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.removeOutliersDerivateScheme(variables, removeOutliersButton.getState());
    }//GEN-LAST:event_removeOutliersButtonActionPerformed

    private void displayIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayIDActionPerformed
        // TODO add your handling code here:
        GuiButtons.VertexLabel(variables, displayAgentLabelButton.getState(), displayActivityLabelButton.getState(), displayEntityLabelButton.getState(), displayTimeLabel.getState(), displayID.getState());
    }//GEN-LAST:event_displayIDActionPerformed

    private void verifyWithinClusterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyWithinClusterButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_verifyWithinClusterButtonActionPerformed

    private void updateErrorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateErrorButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateErrorButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        GuiInference.DBSCANCollapse(variables);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void vertexFilterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_vertexFilterListValueChanged
//        GuiButtons.Filter(variables);
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_vertexFilterListValueChanged

    private void dbscanEpsilonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbscanEpsilonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbscanEpsilonActionPerformed

    private void simEpsilonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simEpsilonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_simEpsilonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        GuiReadFile.loadMergeConfiguration(variables, fileChooser, this);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        GuiReadFile.loadSimilarityConfiguration(variables, fileChooser, this);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void temporalMicrosecondsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalMicrosecondsButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("microseconds", variables, false, true, false, false, false, false, 
                false, false, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);  
    }//GEN-LAST:event_temporalMicrosecondsButtonActionPerformed

    private void temporalSecondsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalSecondsButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("seconds", variables, false, false, false, true, false, false, 
                false, false, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);  
    }//GEN-LAST:event_temporalSecondsButtonActionPerformed

    private void PantoVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PantoVertexActionPerformed
        // TODO add your handling code here:
        GuiFunctions.PanCameraToFirstVertex(variables);
    }//GEN-LAST:event_PantoVertexActionPerformed

    private void temporalNanosecondsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temporalNanosecondsButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.TemporalLayoutGranularity("nanoseconds", variables, true, false, false, false, false, false, 
                false, false, Layouts, temporalNanosecondsButton, temporalMicrosecondsButton, temporalMillisecondsButton, 
                temporalSecondsButton, temporalMinutesButton, temporalHoursButton, 
                temporalDaysButton, temporalWeeksButton);  
    }//GEN-LAST:event_temporalNanosecondsButtonActionPerformed

    private void attributeDisplaySimConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeDisplaySimConfigActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attributeDisplaySimConfigActionPerformed

    private void useEdgeTypeColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useEdgeTypeColorActionPerformed
        // TODO add your handling code here:
        variables.view.repaint();
    }//GEN-LAST:event_useEdgeTypeColorActionPerformed

    private void isStrokeByValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isStrokeByValueButtonActionPerformed
        // TODO add your handling code here:
        variables.isEdgeStrokeByValue = isStrokeByValueButton.getState();
        variables.view.repaint();
    }//GEN-LAST:event_isStrokeByValueButtonActionPerformed

    private void displayEdgeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayEdgeTextActionPerformed
        // TODO add your handling code here:
        GuiButtons.EdgeTextDisplay(variables, displayEdgeText.isSelected());
    }//GEN-LAST:event_displayEdgeTextActionPerformed

    private void hideAgentVerticesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideAgentVerticesButtonActionPerformed
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_hideAgentVerticesButtonActionPerformed

    private void hideEntityVerticesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideEntityVerticesButtonActionPerformed
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_hideEntityVerticesButtonActionPerformed

    private void hideLonelyVerticesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideLonelyVerticesButtonActionPerformed
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_hideLonelyVerticesButtonActionPerformed

    private void hideAgentEdgesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideAgentEdgesButtonActionPerformed
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_hideAgentEdgesButtonActionPerformed

    private void vertexShapeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertexShapeComboBoxActionPerformed
        GuiButtons.selectVertexShape(variables, (String) vertexShapeComboBox.getSelectedItem(), vertexShapeBasedOnAttribute.getText());
    }//GEN-LAST:event_vertexShapeComboBoxActionPerformed

    private void vertexShapeBasedOnAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertexShapeBasedOnAttributeActionPerformed
        GuiButtons.selectVertexShape(variables, (String) vertexShapeComboBox.getSelectedItem(), vertexShapeBasedOnAttribute.getText());
    }//GEN-LAST:event_vertexShapeBasedOnAttributeActionPerformed

    private void layoutAttributeName_X_TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layoutAttributeName_X_TextActionPerformed
        // TODO add your handling code here:
        variables.layout_attribute_X = layoutAttributeName_X_Text.getText();
    }//GEN-LAST:event_layoutAttributeName_X_TextActionPerformed

    private void layoutAttributeName_Y_TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layoutAttributeName_Y_TextActionPerformed
        // TODO add your handling code here:
        variables.layout_attribute_Y = layoutAttributeName_Y_Text.getText();
    }//GEN-LAST:event_layoutAttributeName_Y_TextActionPerformed

    private void isColorByEdgeValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isColorByEdgeValueButtonActionPerformed
        // TODO add your handling code here:
        variables.isEdgeColorByGraphs = !isColorByEdgeValueButton.getState();
        variables.view.repaint();
    }//GEN-LAST:event_isColorByEdgeValueButtonActionPerformed

    private void hideMergedVerticesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideMergedVerticesButtonActionPerformed
        // TODO add your handling code here:
        GuiButtons.Filter(variables);
    }//GEN-LAST:event_hideMergedVerticesButtonActionPerformed

    private void allowVariableLayoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowVariableLayoutButtonActionPerformed
        // TODO add your handling code here:
//        variables.allowVariableLayout = allowVariableLayoutButton.getState();
        GuiButtons.setVariableLayouts(variables, allowVariableLayoutButton.getState(), Layouts);
    }//GEN-LAST:event_allowVariableLayoutButtonActionPerformed

    private void vertexBorderByGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertexBorderByGraphButtonActionPerformed
        // TODO add your handling code here:
        variables.vertexBorderByGraphs = vertexBorderByGraphButton.getState();
        variables.view.repaint();
    }//GEN-LAST:event_vertexBorderByGraphButtonActionPerformed

    private void similarityConsiderNeighborsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similarityConsiderNeighborsButtonActionPerformed
        // TODO add your handling code here:
        variables.considerOnlyNeighborsSimilarityCollapse = similarityConsiderNeighborsButton.getState();
    }//GEN-LAST:event_similarityConsiderNeighborsButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        GuiButtons.Delete(variables);
    }//GEN-LAST:event_jButton2ActionPerformed
   
    /**
     * Main
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional)">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    
                }
            }
        } catch (ClassNotFoundException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        GuiRun.Run();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AttributeStatus;
    private javax.swing.JButton Collapse;
    private javax.swing.JButton CollapseAgent;
    private javax.swing.JLabel DisplayEdges;
    private javax.swing.JLabel DisplayVertices;
    private javax.swing.JComboBox EdgeLineShapeSelection;
    private javax.swing.JLabel EdgeStyle;
    private javax.swing.JScrollPane EdgeTypes;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton Expand;
    private javax.swing.JMenu FileMenu;
    public static javax.swing.JTextField FilterVertexMaxValue;
    public static javax.swing.JTextField FilterVertexMinValue;
    private javax.swing.JLabel GraphLayout;
    private javax.swing.JComboBox Layouts;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel MouseModeLabel;
    private javax.swing.JComboBox MouseModes;
    private javax.swing.JMenuItem OpenConfig;
    private javax.swing.JMenuItem OpenGraph;
    private javax.swing.JMenuItem PantoVertex;
    private javax.swing.JButton Reset;
    private javax.swing.JButton SimilarityInference;
    public static javax.swing.JComboBox StatusFilterBox;
    public static javax.swing.JToggleButton TemporalFilterToggle;
    private javax.swing.JPanel ToolMenu;
    private javax.swing.JScrollPane VertexLabels;
    private javax.swing.JCheckBoxMenuItem allowVariableLayoutButton;
    public static javax.swing.JRadioButtonMenuItem attributeDisplaySimConfig;
    private javax.swing.JCheckBoxMenuItem autoDetectAttributeCheckBox;
    private javax.swing.JCheckBoxMenuItem autoDetectEdgesCheckBox;
    public static javax.swing.JTextField dbscanEpsilon;
    private javax.swing.JCheckBoxMenuItem displayActivityLabelButton;
    private javax.swing.JCheckBoxMenuItem displayAgentLabelButton;
    private javax.swing.JCheckBoxMenuItem displayEdgeText;
    private javax.swing.JMenu displayEdgeTextButton;
    private javax.swing.JCheckBoxMenuItem displayEntityLabelButton;
    private javax.swing.JCheckBoxMenuItem displayID;
    private javax.swing.JCheckBoxMenuItem displayTimeLabel;
    private javax.swing.JCheckBoxMenuItem doDerivateButton;
    public static javax.swing.JList edgeFilterList;
    private javax.swing.JMenuItem exportGraphButton;
    private javax.swing.JFileChooser fileChooser;
    public static javax.swing.JCheckBoxMenuItem hideAgentEdgesButton;
    public static javax.swing.JCheckBoxMenuItem hideAgentVerticesButton;
    public static javax.swing.JCheckBoxMenuItem hideEntityVerticesButton;
    public static javax.swing.JCheckBoxMenuItem hideLonelyVerticesButton;
    public static javax.swing.JCheckBoxMenuItem hideMergedVerticesButton;
    private javax.swing.JCheckBoxMenuItem isColorByEdgeValueButton;
    public static javax.swing.JCheckBox isSTDeps;
    public static javax.swing.JCheckBoxMenuItem isStrokeByValueButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    public static javax.swing.JMenu jMenu3;
    public static javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JTextField layoutAttributeName_X_Text;
    private javax.swing.JTextField layoutAttributeName_Y_Text;
    private javax.swing.JMenuItem mergeGraphButtom;
    public static javax.swing.JCheckBoxMenuItem removeOutliersButton;
    public static javax.swing.JTextField simEpsilon;
    public static javax.swing.JTextField simStdInc;
    public static javax.swing.JTextField simStdSize;
    private javax.swing.JCheckBoxMenuItem similarityConsiderNeighborsButton;
    public static javax.swing.JCheckBoxMenuItem temporalDaysButton;
    public static javax.swing.JCheckBoxMenuItem temporalHoursButton;
    public static javax.swing.JCheckBoxMenuItem temporalMicrosecondsButton;
    public static javax.swing.JCheckBoxMenuItem temporalMillisecondsButton;
    public static javax.swing.JCheckBoxMenuItem temporalMinutesButton;
    public static javax.swing.JCheckBoxMenuItem temporalNanosecondsButton;
    public static javax.swing.JCheckBoxMenuItem temporalSecondsButton;
    public static javax.swing.JCheckBoxMenuItem temporalWeeksButton;
    private javax.swing.JCheckBoxMenuItem updateErrorButton;
    public static javax.swing.JCheckBoxMenuItem useEdgeTypeColor;
    private javax.swing.JCheckBoxMenuItem verifyWithinClusterButton;
    private javax.swing.JCheckBoxMenuItem vertexBorderByGraphButton;
    public static javax.swing.JList vertexFilterList;
    private javax.swing.JTextField vertexShapeBasedOnAttribute;
    public static javax.swing.JComboBox<String> vertexShapeComboBox;
    // End of variables declaration//GEN-END:variables
}