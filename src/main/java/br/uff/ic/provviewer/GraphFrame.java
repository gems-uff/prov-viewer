package br.uff.ic.provviewer;

import br.uff.ic.XMLConverter.XMLConverter;
import br.uff.ic.provviewer.Edge.Edge;
import br.uff.ic.provviewer.Filter.Filters;
import br.uff.ic.provviewer.Filter.PreFilters;
import br.uff.ic.provviewer.GUI.GuiButtons;
import br.uff.ic.provviewer.GUI.GuiProlog;
import br.uff.ic.provviewer.Inference.PrologInference;
import br.uff.ic.provviewer.Input.Config;
import br.uff.ic.provviewer.Input.UnityReader;
import br.uff.ic.provviewer.Layout.Temporal_Layout;
import br.uff.ic.provviewer.Stroke.EdgeStroke;
import br.uff.ic.provviewer.Stroke.VertexStroke;
import br.uff.ic.provviewer.Vertex.AgentVertex;
import br.uff.ic.provviewer.Vertex.ColorScheme.VertexPainter;
import br.uff.ic.provviewer.Vertex.EntityVertex;
import br.uff.ic.provviewer.Vertex.Vertex;
import br.uff.ic.provviewer.Vertex.VertexShape;
import edu.uci.ics.jung.graph.DirectedGraph;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.Layer;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.CrossoverScalingControl;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ScalingControl;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.subLayout.GraphCollapser;
import edu.uci.ics.jung.visualization.util.PredicatedParallelEdgeIndexFunction;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.commons.collections15.Predicate;
import org.apache.commons.collections15.Transformer;

/**
 * Prov Viewer GUI. Can be used as a Template.
 * @author kohwalter
 */
public class GraphFrame extends javax.swing.JFrame {
    final Set exclusions = new HashSet();
    
    static String demo = File.separator + "Graph" + File.separator + "Car_Tutorial.xml";    
//    static String demo = File.separator + "Graph" + File.separator + "Car_Tutorial3.xml";
//    static String demo = File.separator + "Graph" + File.separator + "Angry_Robots.xml";
//    static String demo = File.separator + "Graph" + File.separator + "2D_Provenance.xml";
//    static String demo = File.separator + "Graph" + File.separator + "input.xml";
//    static String demo = File.separator + "Graph" + File.separator + "bus.xml";
//    static String demo = File.separator + "Graph" + File.separator + "map.xml";
    
    DefaultModalGraphMouse mouse = new DefaultModalGraphMouse();
    boolean filterCredits = false;
    File file;

    Variables variables = new Variables();
    Collapser collapser = new Collapser();
    Filters filter = new Filters();
    Config config = new Config();
    PrologInference testProlog = new PrologInference();
    boolean prologIsInitialized = false;
    boolean initLayout = true;
    boolean initConfig = false;

    /**
     * Creates new form GraphFrame
     * @param graph 
     */
    public GraphFrame(DirectedGraph<Object, Edge> graph) {
        initComponents();
        initGraphComponent(graph);
        //TODO: Initialize with a default config and graph
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        ToolMenu = new javax.swing.JPanel();
        CollapseAgent = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Expand = new javax.swing.JButton();
        Collapse = new javax.swing.JButton();
        MouseModes = new javax.swing.JComboBox();
        FilterNodeAgentButton = new javax.swing.JCheckBox();
        FilterNodeLonelyButton = new javax.swing.JCheckBox();
        VertexFilter = new javax.swing.JLabel();
        DisplayEdges = new javax.swing.JLabel();
        EdgeLineShapeSelection = new javax.swing.JComboBox();
        StatusFilterBox = new javax.swing.JComboBox();
        ShowEdgeTextButton = new javax.swing.JCheckBox();
        AttributeStatus = new javax.swing.JLabel();
        EdgeStyle = new javax.swing.JLabel();
        MouseModeLabel = new javax.swing.JLabel();
        EdgeTypes = new javax.swing.JScrollPane();
        FilterList = new javax.swing.JList();
        Layouts = new javax.swing.JComboBox();
        GraphLayout = new javax.swing.JLabel();
        FilterEdgeAgentButton = new javax.swing.JCheckBox();
        InitPrologButton = new javax.swing.JToggleButton();
        PrologGenerateFacts = new javax.swing.JButton();
        PrologSimilarityInference = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenConfig = new javax.swing.JMenuItem();
        OpenGraph = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("D:\\SVN\\Prov_Viewer\\prov-viewer\\src\\main\\resources"));
        fileChooser.setDialogTitle("This is my open dialog");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prov Viewer");
        setMinimumSize(new java.awt.Dimension(800, 0));
        setPreferredSize(new java.awt.Dimension(800, 600));

        ToolMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        CollapseAgent.setText("CollapseAgent");
        CollapseAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollapseAgentActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Expand.setText("Expand");
        Expand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpandActionPerformed(evt);
            }
        });

        Collapse.setText("Collapse");
        Collapse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollapseActionPerformed(evt);
            }
        });

        MouseModes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Transforming", "Picking" }));
        MouseModes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MouseModesActionPerformed(evt);
            }
        });

        FilterNodeAgentButton.setText("Agents Vertices");
        FilterNodeAgentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterNodeAgentButtonActionPerformed(evt);
            }
        });

        FilterNodeLonelyButton.setText("Lonely Vertices");
        FilterNodeLonelyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterNodeLonelyButtonActionPerformed(evt);
            }
        });

        VertexFilter.setText("Vertex Filter");

        DisplayEdges.setText("Display Edge");

        EdgeLineShapeSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "QuadCurve", "Line" }));
        EdgeLineShapeSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeLineShapeSelectionActionPerformed(evt);
            }
        });

        StatusFilterBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "Morale", "Stamina", "Hours", "Weekend", "Credits", "Role" }));
        StatusFilterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusFilterBoxActionPerformed(evt);
            }
        });

        ShowEdgeTextButton.setText("Edge Text");
        ShowEdgeTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowEdgeTextButtonActionPerformed(evt);
            }
        });

        AttributeStatus.setText("Attribute Status");

        EdgeStyle.setText("Edge Style");

        MouseModeLabel.setText("Mouse Mode");

        FilterList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        FilterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                FilterListValueChanged(evt);
            }
        });
        EdgeTypes.setViewportView(FilterList);

        Layouts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CircleLayout", "FRLayout", "FRLayout2", "TemporalLayout", "SpatialLayout", "ISOMLayout", "KKLayout" }));
        Layouts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LayoutsActionPerformed(evt);
            }
        });

        GraphLayout.setText("Graph Layout");

        FilterEdgeAgentButton.setText("Agent Edge");
        FilterEdgeAgentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeAgentButtonActionPerformed(evt);
            }
        });

        InitPrologButton.setText("Init Prolog");
        InitPrologButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InitPrologButtonActionPerformed(evt);
            }
        });

        PrologGenerateFacts.setText("Generate Facts");
        PrologGenerateFacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrologGenerateFactsActionPerformed(evt);
            }
        });

        PrologSimilarityInference.setText("Similarity Inference");
        PrologSimilarityInference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrologSimilarityInferenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ToolMenuLayout = new javax.swing.GroupLayout(ToolMenu);
        ToolMenu.setLayout(ToolMenuLayout);
        ToolMenuLayout.setHorizontalGroup(
            ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ToolMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ToolMenuLayout.createSequentialGroup()
                        .addComponent(CollapseAgent)
                        .addGap(30, 30, 30))
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(VertexFilter))
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FilterNodeAgentButton)
                                    .addComponent(FilterNodeLonelyButton))
                                .addGap(18, 18, 18)
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ShowEdgeTextButton)
                                    .addComponent(FilterEdgeAgentButton))))
                        .addGap(24, 24, 24)))
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(DisplayEdges, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                    .addComponent(EdgeTypes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addComponent(Collapse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Expand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Reset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(InitPrologButton))
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AttributeStatus)
                            .addComponent(Layouts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GraphLayout)
                            .addComponent(StatusFilterBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addComponent(MouseModes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EdgeStyle)
                                    .addComponent(EdgeLineShapeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MouseModeLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PrologGenerateFacts, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(PrologSimilarityInference, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addContainerGap())
        );
        ToolMenuLayout.setVerticalGroup(
            ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolMenuLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CollapseAgent)
                    .addComponent(DisplayEdges)
                    .addComponent(Collapse)
                    .addComponent(Expand)
                    .addComponent(Reset)
                    .addComponent(InitPrologButton))
                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(VertexFilter))
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(FilterNodeAgentButton)
                                    .addComponent(ShowEdgeTextButton))
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(FilterNodeLonelyButton)
                                    .addComponent(FilterEdgeAgentButton))))
                        .addContainerGap())
                    .addGroup(ToolMenuLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ToolMenuLayout.createSequentialGroup()
                                .addGap(0, 7, Short.MAX_VALUE)
                                .addComponent(EdgeTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ToolMenuLayout.createSequentialGroup()
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ToolMenuLayout.createSequentialGroup()
                                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(AttributeStatus)
                                            .addComponent(EdgeStyle))
                                        .addGap(6, 6, 6)
                                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(StatusFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(EdgeLineShapeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(MouseModeLabel)
                                            .addComponent(GraphLayout)))
                                    .addGroup(ToolMenuLayout.createSequentialGroup()
                                        .addComponent(PrologGenerateFacts)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PrologSimilarityInference)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ToolMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(MouseModes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Layouts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 28, Short.MAX_VALUE))))))
        );

        getContentPane().add(ToolMenu, java.awt.BorderLayout.PAGE_END);

        FileMenu.setText("File");

        OpenConfig.setText("Open Config File");
        OpenConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenConfigActionPerformed(evt);
            }
        });
        FileMenu.add(OpenConfig);

        OpenGraph.setText("Open Graph File");
        OpenGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenGraphActionPerformed(evt);
            }
        });
        FileMenu.add(OpenGraph);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        FileMenu.add(Exit);

        MenuBar.add(FileMenu);

        setJMenuBar(MenuBar);

        setSize(new java.awt.Dimension(672, 738));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * ================================================
     * Expand Button
     * ================================================
     */
    private void ExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpandActionPerformed
        GuiButtons.Expand(collapser, variables, filter);
    }//GEN-LAST:event_ExpandActionPerformed
    /**
     * ================================================
     * Collapse Button
     * ================================================
     */
    private void CollapseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollapseActionPerformed
        GuiButtons.Collapse(collapser, variables, filter);
    }//GEN-LAST:event_CollapseActionPerformed
    /**
     * ================================================
     * Reset Button
     * ================================================
     */
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        GuiButtons.Reset(collapser, variables, filter);
    }//GEN-LAST:event_ResetActionPerformed
    /**
     * ================================================
     * Select Mouse mode Button
     * ================================================
     */
    private void MouseModesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MouseModesActionPerformed
        GuiButtons.MouseModes(mouse, MouseModes);
    }//GEN-LAST:event_MouseModesActionPerformed
    /**
     * ================================================
     * Collapse Agent's processes
     * ================================================
     */
    private void CollapseAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollapseAgentActionPerformed
        GuiButtons.CollapseAgent(collapser, variables, filter);
    }//GEN-LAST:event_CollapseAgentActionPerformed

   /**
         * ================================================
         * Filtering agent vertices
         * ================================================
         */
    private void FilterNodeAgentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterNodeAgentButtonActionPerformed
        GuiButtons.Filter(collapser, variables, filter);
    }//GEN-LAST:event_FilterNodeAgentButtonActionPerformed

   /**
         * ================================================
         * Filtering lonely vertices
         * ================================================
         */
    private void FilterNodeLonelyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterNodeLonelyButtonActionPerformed
        GuiButtons.Filter(collapser, variables, filter);
    }//GEN-LAST:event_FilterNodeLonelyButtonActionPerformed

   /**
         * ================================================
         * Edge Shape: Make it to be a line instead of quadratic curves
         * ================================================
         */
    private void EdgeLineShapeSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeLineShapeSelectionActionPerformed
        GuiButtons.EdgeLineMode(EdgeLineShapeSelection, variables);
    }//GEN-LAST:event_EdgeLineShapeSelectionActionPerformed

    /**
         * ================================================
         * Status Filter box
         * ================================================
         */
    private void StatusFilterBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusFilterBoxActionPerformed
        GuiButtons.StatusFilter(variables);
    }//GEN-LAST:event_StatusFilterBoxActionPerformed
    /**
         * ================================================
         * Show edge text button
         * ================================================
         */
    private void ShowEdgeTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowEdgeTextButtonActionPerformed
        GuiButtons.EdgeTextDisplay(variables, ShowEdgeTextButton.isSelected());        
    }//GEN-LAST:event_ShowEdgeTextButtonActionPerformed

   
    private void FilterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_FilterListValueChanged
        GuiButtons.Filter(collapser, variables, filter);
    }//GEN-LAST:event_FilterListValueChanged

    private void LayoutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LayoutsActionPerformed
        GuiButtons.LayoutSelection(variables, Layouts);
    }//GEN-LAST:event_LayoutsActionPerformed

    boolean initialGraph = true;
    private void OpenConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenConfigActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            Config.Initialize(file);
            initConfig = true;
            
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenConfigActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        GuiButtons.Exit();
    }//GEN-LAST:event_ExitActionPerformed

    private void OpenGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenGraphActionPerformed
        // TODO add your handling code here:
        if(initConfig)
        {
            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile();
                variables.graph = getGraph(file);
                variables.collapsedGraph = variables.graph;
                collapser.Filters(variables, filter);
                variables.view.repaint(); 
                initialGraph = false;
            } else {
                System.out.println("File access cancelled by user.");
            }
        }
    }//GEN-LAST:event_OpenGraphActionPerformed

    private void FilterEdgeAgentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeAgentButtonActionPerformed
        GuiButtons.Filter(collapser, variables, filter);
    }//GEN-LAST:event_FilterEdgeAgentButtonActionPerformed

    private void InitPrologButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InitPrologButtonActionPerformed
        GuiProlog.InitializeProlog(testProlog, prologIsInitialized, InitPrologButton);
    }//GEN-LAST:event_InitPrologButtonActionPerformed

    private void PrologGenerateFactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrologGenerateFactsActionPerformed
        GuiProlog.GeneratePrologFacts(initialGraph, file, demo);
    }//GEN-LAST:event_PrologGenerateFactsActionPerformed

    private void PrologSimilarityInferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrologSimilarityInferenceActionPerformed
        GuiProlog.SimilarityInference(InitPrologButton.isSelected(), testProlog, collapser, variables, filter);
    }//GEN-LAST:event_PrologSimilarityInferenceActionPerformed
   
    private void InitVariables()
    {
        mouse = new DefaultModalGraphMouse();
        filterCredits = false;
        variables = new Variables();
        collapser = new Collapser();
        filter = new Filters();
        testProlog = new PrologInference();
        prologIsInitialized = false;
        initLayout = true;
        initConfig = false;
    }
    
    private void SetView(DirectedGraph<Object, Edge> graph)
    {
        /**
         * ================================================
         * Choosing layout
         * ================================================
         */
        if(initLayout)
        {
            config.Initialize();
            variables.layout = new Temporal_Layout<Object, Edge>(graph);
            variables.view = new VisualizationViewer<Object, Edge>(variables.layout);
            Layouts.setSelectedItem("SpatialLayout");
            initLayout = false;
        }
        
        ScaleView();
        PanCameraToFirstVertex();
        
        variables.gCollapser = new GraphCollapser(graph);
        
        final PredicatedParallelEdgeIndexFunction eif = PredicatedParallelEdgeIndexFunction.getInstance();
        // ================================================
        //        final Set exclusions = new HashSet();
        //testing for edge collapse
        eif.setPredicate(new Predicate() {
            @Override
            public boolean evaluate(Object e) {

                    return exclusions.contains(e);
            }});
        // ================================================
        variables.view.getRenderContext().setParallelEdgeIndexFunction(eif);
        
        variables.view.setBackground(Color.white);
        this.getContentPane().add(variables.view, BorderLayout.CENTER);
    }
    
    /**
     * Scale back the zoom in the camera
     */
    private void ScaleView()
    {
        variables.view = new VisualizationViewer<Object, Edge>(variables.layout);
        final ScalingControl scaler = new CrossoverScalingControl();
        scaler.scale(variables.view, 1/2.1f, variables.view.getCenter());
    }
    
    /**
     * Pan the camera to the first vertex in the graph
     */
    private void PanCameraToFirstVertex()
    {
        Vertex first = (Vertex) variables.graph.getVertices().iterator().next();    
        variables.view.getGraphLayout();
        Point2D q = variables.view.getGraphLayout().transform(first);
        Point2D lvc = 
            variables.view.getRenderContext().getMultiLayerTransformer().inverseTransform(variables.view.getCenter());
        final double dx = (lvc.getX() - q.getX());
        final double dy = (lvc.getY() - q.getY());
        variables.view.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT).translate(dx, dy);
    }
    
    private void MouseInteraction()
    {
        /**
         * ================================================
         * Adding interaction via mouse
         * Commands: t for translate, p for picking
         * ================================================
         */
//        DefaultModalGraphMouse mouse = new DefaultModalGraphMouse();
        variables.view.setGraphMouse(mouse);
        variables.view.addKeyListener(mouse.getModeKeyListener());
    }
    
    private void Tooltip()
    {
        /**
         * ================================================
         * Add a listener for ToolTips
         * ================================================
         */
        variables.view.setVertexToolTipTransformer(new ToStringLabeller() {
            @Override
            public String transform(Object v) {
                    if(v instanceof Graph) {
                            return ("<html>" + ((Graph)v).getVertices().toString() + "</html>");
                    }
                    return ("<html>" + v.toString() + "</html>");
            }});
         /**
         * ================================================
         * Edge Tooltip
         * ================================================
         */
        variables.view.setEdgeToolTipTransformer(new Transformer<Edge,String>(){
        @Override
            public String transform(Edge n) 
            {
                return n.getEdgeInfluence();
            }
        });
    }
    
    private void VertexLabel()
    {
        /**
         * ================================================
         * Labeling Vertex
         * ================================================
         */
//        view.getRenderContext().setVertexLabelTransformer(new ToStringLabeller<Node>());
        variables.view.getRenderContext().setVertexLabelTransformer(new Transformer<Object, String>() {

                @Override
                public String transform(Object v) {
                    if(v instanceof Graph) {
                        for(Object vertex : ((Graph)v).getVertices())
                        {
                            if(vertex instanceof AgentVertex) {
                                return "<html><font size=\"8\">" + ((Vertex)vertex).getLabel();
                            }
                        }    
                    }
                    if(v instanceof AgentVertex) {
                                return "<html><font size=\"8\">" + ((Vertex)v).getLabel();
                            }
                    else if((v instanceof EntityVertex) && Config.showEntityLabel && Config.showEntityDate) {
                        return "<html><font size=\"8\">" + String.valueOf((int)((Vertex)v).getDate()) + " : " + ((Vertex)v).getLabel();
                    }
                    else if((v instanceof EntityVertex) && Config.showEntityDate) {
                        return "<html><font size=\"8\">" + String.valueOf((int)((Vertex)v).getDate());
                    }
                    else if((v instanceof EntityVertex) && Config.showEntityLabel) {
                        return "<html><font size=\"8\">" + ((Vertex)v).getLabel();
                    }
                    return "";
                }
            });
    }
    
    private void Stroke(DirectedGraph<Object, Edge> graph)
    {
        /**
         * ================================================
         * Vertex Stroke
         * ================================================
         */
        Transformer<Object, Stroke> nodeStrokeTransformer =  new Transformer<Object, Stroke>() {
            @Override
            public Stroke transform(Object v) {
                return VertexStroke.VertexStroke(v, variables.view, variables.layout);
        }};
        variables.view.getRenderContext().setVertexStrokeTransformer(nodeStrokeTransformer);
        /**
         * ================================================
         * Edge Stroke
         * ================================================
         */
        variables.ComputeEdgeTypeValues(graph);
        Transformer<Edge, Stroke> edgeStrokeTransformer =  new Transformer<Edge, Stroke>() {
            @Override
            public Stroke transform(Edge e) {
                return EdgeStroke.StrokeByType(e, variables);
            }
        };
        variables.view.getRenderContext().setEdgeStrokeTransformer(edgeStrokeTransformer);
    }
    
    private void GraphPaint()
    {
        /**
         * ================================================
         * Vertex Paint
         * ================================================
         */
        VertexPainter.VertexPainter("Default", variables.view, variables);
        /**
         * ================================================
         * Edge Paint
         * ================================================
         */
        Transformer edgePainter = new Transformer<Edge,Paint>() {
            @Override
            public Paint transform(Edge edge) {
                return edge.getColor();
            }
        };  
        variables.view.getRenderContext().setEdgeDrawPaintTransformer(edgePainter);
        variables.view.getRenderContext().setArrowDrawPaintTransformer(edgePainter);
        variables.view.getRenderContext().setArrowFillPaintTransformer(edgePainter);
    }
    
    private void VertexShape()
    {
        /**
         * ================================================
         * Vertex Shape
         * ================================================
         */
        variables.view.getRenderContext().setVertexShapeTransformer(new VertexShape());
    }
    
    private void InitBackground() {
//        final ImageIcon whiteIcon = new ImageIcon(getClass().getResource("/images/White.png"));
//        System.out.println("ImageIcon: " + BasePath.getBasePathForClass(GraphFrame.class) + "/images/White.png");
        final ImageIcon whiteIcon = new ImageIcon(BasePath.getBasePathForClass(GraphFrame.class) + "/images/White.png");

        ImageIcon mapIcon = null;
        //Config.imageLocation = "/images/AngrybotsMap.png";
        try {
            mapIcon
//                    = new ImageIcon(getClass().getResource(Config.imageLocation));
                    = new ImageIcon(BasePath.getBasePathForClass(GraphFrame.class) + Config.imageLocation);
        } catch (Exception ex) {
            System.err.println("Can't load \"" + Config.imageLocation + "\"");
        }
        
        final ImageIcon icon = mapIcon;
        final int offsetX = (int) ((-icon.getIconWidth() * 0.5) - (Config.imageOffsetX * Config.coordinatesScale));
        final int offsetY = (int) ((-icon.getIconHeight() *  0.5) + (Config.imageOffsetY * Config.coordinatesScale));
        
        if (icon != null) {
                variables.view.addPreRenderPaintable(new VisualizationViewer.Paintable() {
                    public void paint(Graphics g) {
                        Graphics2D g2d = (Graphics2D) g;
                        AffineTransform oldXform = g2d.getTransform();
                        AffineTransform lat
                                = variables.view.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT).getTransform();
                        AffineTransform vat
                                = variables.view.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW).getTransform();
                        AffineTransform at = new AffineTransform();
                        at.concatenate(g2d.getTransform());
                        at.concatenate(vat);
                        at.concatenate(lat);
                        g2d.setTransform(at);
                        if (Layouts.getSelectedItem().equals("SpatialLayout")) {
                            g.drawImage(icon.getImage(), offsetX, offsetY,
                                icon.getIconWidth(), icon.getIconHeight(), variables.view);
                        }
                        else
                        {
                            g.drawImage(whiteIcon.getImage(), offsetX, offsetY,
                                icon.getIconWidth(), icon.getIconHeight(), variables.view);
                        }
                        g2d.setTransform(oldXform);
                    }

                    public boolean useTransform() {
                        return false;
                    }
                });
        } 
    }
    
    private void InitFilters(DirectedGraph<Object, Edge> graph)
    {
        filter.filteredGraph = graph;
        filter.FilterInit();
        
        PreFilters.PreFilter();
        //Initialize selected filters from the GUI
        collapser.Filters(variables, filter);
    }
    /**
     * ================================================
     * Init Graph Component
     * ================================================
     */
    
    private void initGraphComponent(DirectedGraph<Object, Edge> graph) {
        initConfig = true;
        variables.graph = graph;
        variables.collapsedGraph = variables.graph;
        
        SetView(variables.graph); 
        InitBackground();
        MouseInteraction(); 
        Tooltip();
        VertexLabel();
        Stroke(variables.graph); 
        GraphPaint();
        VertexShape();
        InitFilters(variables.graph);
    }
    
    /**
     * Get Graph from TSVReader
     * @param path
     * @return 
     */
    public static DirectedGraph<Object,Edge> getGraph(File xmlGraph) {
        DirectedGraph<Object,Edge> g = new DirectedSparseMultigraph<Object,Edge>();
        try {
                UnityReader xmlReader = new UnityReader(xmlGraph);
                xmlReader.ReadXML();
                for (Edge edge : xmlReader.getEdges()) {
                    g.addEdge(edge, edge.getSource(), edge.getTarget());
                }
            
        } catch (URISyntaxException ex) {
            Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return g;
}
    /**
     * Main
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional)">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    
                }
            }
        } catch (ClassNotFoundException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>
        //Config.Initialize();
        System.out.println("Graph: " + BasePath.getBasePathForClass(GraphFrame.class) + demo);
        File graphFile = new File(BasePath.getBasePathForClass(GraphFrame.class) + demo);
        final DirectedGraph<Object, Edge> graph = getGraph(graphFile);
        
        java.awt.EventQueue.invokeLater(new Runnable() {
                
            @Override
                public void run() {
                    new GraphFrame(graph).setVisible(true);
                }
            });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AttributeStatus;
    private javax.swing.JButton Collapse;
    private javax.swing.JButton CollapseAgent;
    private javax.swing.JLabel DisplayEdges;
    private javax.swing.JComboBox EdgeLineShapeSelection;
    private javax.swing.JLabel EdgeStyle;
    private javax.swing.JScrollPane EdgeTypes;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton Expand;
    private javax.swing.JMenu FileMenu;
    public static javax.swing.JCheckBox FilterEdgeAgentButton;
    public static javax.swing.JList FilterList;
    public static javax.swing.JCheckBox FilterNodeAgentButton;
    public static javax.swing.JCheckBox FilterNodeLonelyButton;
    private javax.swing.JLabel GraphLayout;
    private javax.swing.JToggleButton InitPrologButton;
    private javax.swing.JComboBox Layouts;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel MouseModeLabel;
    private javax.swing.JComboBox MouseModes;
    private javax.swing.JMenuItem OpenConfig;
    private javax.swing.JMenuItem OpenGraph;
    private javax.swing.JButton PrologGenerateFacts;
    private javax.swing.JButton PrologSimilarityInference;
    private javax.swing.JButton Reset;
    private javax.swing.JCheckBox ShowEdgeTextButton;
    public static javax.swing.JComboBox StatusFilterBox;
    private javax.swing.JPanel ToolMenu;
    private javax.swing.JLabel VertexFilter;
    private javax.swing.JFileChooser fileChooser;
    // End of variables declaration//GEN-END:variables
}