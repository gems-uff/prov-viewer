package br.uff.ic.SDM;

import br.uff.ic.Prov_Viewer.Collapser;
import br.uff.ic.Prov_Viewer.Edge;
import br.uff.ic.Prov_Viewer.PreFilters;
import br.uff.ic.Prov_Viewer.Variables;
import br.uff.ic.Prov_Viewer.Vertex;
import edu.uci.ics.jung.graph.DirectedGraph;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.CrossoverScalingControl;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ScalingControl;
import edu.uci.ics.jung.visualization.decorators.EdgeShape;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.picking.PickedInfo;
import edu.uci.ics.jung.visualization.subLayout.GraphCollapser;
import edu.uci.ics.jung.visualization.util.PredicatedParallelEdgeIndexFunction;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.commons.collections15.Predicate;
import org.apache.commons.collections15.Transformer;

/**
 * Prov Viewer GUI customized to SDM game. Can be used as a Template.
 * @author kohwalter
 */
public class GraphFrame extends javax.swing.JFrame {
    static String filePath = "log.txt";
    static String tutorialPath = "tutorial.txt";
    final Set exclusions = new HashSet();
    
//    VisualizationViewer<Object, Edge> view;
//    Layout<Object, Edge> layout;
//    GraphCollapser gCollapser;
//    static DirectedGraph<Object,Edge> graph;
//    DirectedGraph<Object,Edge> collapsedGraph;
    
    DefaultModalGraphMouse mouse = new DefaultModalGraphMouse();
    boolean filterCredits = false;

    Variables variables = new SDM_Variables();
    Collapser collapser = new SDM_Collapser();
    SDM_Filters filter = new SDM_Filters();

    /**
     * Creates new form GraphFrame
     * @param graph 
     */
    public GraphFrame(DirectedGraph<Object, Edge> graph) {
        initComponents();
        initGraphComponent(graph);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        G7Days = new javax.swing.JButton();
        CollapseAgent = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Expand = new javax.swing.JButton();
        Collapse = new javax.swing.JButton();
        MouseModes = new javax.swing.JComboBox();
        FilterEdgeCreditsButton = new javax.swing.JCheckBox();
        FilterNodeAgentButton = new javax.swing.JCheckBox();
        FilterEdgeNeutralButton = new javax.swing.JCheckBox();
        FilterNodeLonelyButton = new javax.swing.JCheckBox();
        FilterEdgeQualityButton = new javax.swing.JCheckBox();
        FilterEdgeProgressButton = new javax.swing.JCheckBox();
        FilterEdgeAidButton = new javax.swing.JCheckBox();
        FilterEdgeValButton = new javax.swing.JCheckBox();
        FilterEdgeDiscoveryButton = new javax.swing.JCheckBox();
        FilterEdgeRepairButton = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        EdgeLineShapeSelection = new javax.swing.JComboBox();
        StatusFilterBox = new javax.swing.JComboBox();
        ShowEdgeTextButton = new javax.swing.JCheckBox();
        EdgeFilterTCButton = new javax.swing.JCheckBox();
        EdgeFilterBugsButton = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        EdgeFilterStaminaButton = new javax.swing.JCheckBox();
        EdgeFilterMoraleButton = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prov Viewer");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        G7Days.setText("Granularity: 7 days");
        G7Days.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G7DaysActionPerformed(evt);
            }
        });

        CollapseAgent.setText("CollapseAgent");
        CollapseAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollapseAgentActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Expand.setText("Expand");
        Expand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpandActionPerformed(evt);
            }
        });

        Collapse.setText("Collapse");
        Collapse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollapseActionPerformed(evt);
            }
        });

        MouseModes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Transforming", "Picking" }));
        MouseModes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MouseModesActionPerformed(evt);
            }
        });

        FilterEdgeCreditsButton.setText("Credits");
        FilterEdgeCreditsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeCreditsButtonActionPerformed(evt);
            }
        });

        FilterNodeAgentButton.setText("Agents Vertices");
        FilterNodeAgentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterNodeAgentButtonActionPerformed(evt);
            }
        });

        FilterEdgeNeutralButton.setSelected(true);
        FilterEdgeNeutralButton.setText("Neutral");
        FilterEdgeNeutralButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeNeutralButtonActionPerformed(evt);
            }
        });

        FilterNodeLonelyButton.setText("Lonely Vertices");
        FilterNodeLonelyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterNodeLonelyButtonActionPerformed(evt);
            }
        });

        FilterEdgeQualityButton.setText("Quality");
        FilterEdgeQualityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeQualityButtonActionPerformed(evt);
            }
        });

        FilterEdgeProgressButton.setText("Progress");
        FilterEdgeProgressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeProgressButtonActionPerformed(evt);
            }
        });

        FilterEdgeAidButton.setText("Aid");
        FilterEdgeAidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeAidButtonActionPerformed(evt);
            }
        });

        FilterEdgeValButton.setText("Val");
        FilterEdgeValButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeValButtonActionPerformed(evt);
            }
        });

        FilterEdgeDiscoveryButton.setText("Discovery");
        FilterEdgeDiscoveryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeDiscoveryButtonActionPerformed(evt);
            }
        });

        FilterEdgeRepairButton.setText("Repair");
        FilterEdgeRepairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEdgeRepairButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Vertex Filter");

        jLabel2.setText("Display Edge");

        EdgeLineShapeSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "QuadCurve", "Line" }));
        EdgeLineShapeSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeLineShapeSelectionActionPerformed(evt);
            }
        });

        StatusFilterBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "Morale", "Stamina", "Hours", "Weekend", "Credits", "Role" }));
        StatusFilterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusFilterBoxActionPerformed(evt);
            }
        });

        ShowEdgeTextButton.setText("Edge Text");
        ShowEdgeTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowEdgeTextButtonActionPerformed(evt);
            }
        });

        EdgeFilterTCButton.setText("Test Cases");
        EdgeFilterTCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeFilterTCButtonActionPerformed(evt);
            }
        });

        EdgeFilterBugsButton.setText("Bugs");
        EdgeFilterBugsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeFilterBugsButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Attribute Status");

        jLabel4.setText("Edge Style");

        jLabel5.setText("Mouse Mode");

        EdgeFilterStaminaButton.setText("Stamina");
        EdgeFilterStaminaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeFilterStaminaButtonActionPerformed(evt);
            }
        });

        EdgeFilterMoraleButton.setText("Morale");
        EdgeFilterMoraleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeFilterMoraleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(G7Days)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CollapseAgent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                        .addComponent(Collapse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Expand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Reset))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FilterNodeLonelyButton)
                            .addComponent(FilterNodeAgentButton)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel1)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ShowEdgeTextButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FilterEdgeCreditsButton)
                                    .addComponent(FilterEdgeNeutralButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FilterEdgeQualityButton)
                                    .addComponent(FilterEdgeProgressButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FilterEdgeValButton)
                                    .addComponent(FilterEdgeAidButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FilterEdgeRepairButton)
                                    .addComponent(FilterEdgeDiscoveryButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EdgeFilterTCButton)
                                    .addComponent(EdgeFilterBugsButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EdgeFilterMoraleButton)
                                    .addComponent(EdgeFilterStaminaButton))))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(StatusFilterBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MouseModes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EdgeLineShapeSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jLabel4))
                    .addComponent(jLabel5))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CollapseAgent)
                                .addComponent(G7Days))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Collapse)
                                .addComponent(Expand)
                                .addComponent(Reset)))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(ShowEdgeTextButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FilterEdgeNeutralButton)
                            .addComponent(FilterEdgeQualityButton)
                            .addComponent(FilterEdgeAidButton)
                            .addComponent(FilterEdgeDiscoveryButton)
                            .addComponent(EdgeFilterBugsButton)
                            .addComponent(EdgeFilterMoraleButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(FilterEdgeProgressButton)
                                .addComponent(FilterEdgeValButton)
                                .addComponent(FilterEdgeRepairButton)
                                .addComponent(EdgeFilterTCButton)
                                .addComponent(MouseModes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EdgeFilterStaminaButton))
                            .addComponent(FilterEdgeCreditsButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(FilterNodeAgentButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(StatusFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EdgeLineShapeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(3, 3, 3)))
                        .addComponent(FilterNodeLonelyButton)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-822)/2, (screenSize.height-638)/2, 822, 638);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * ================================================
     * Expand Button
     * ================================================
     */
    private void ExpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpandActionPerformed
        Collection picked = new HashSet(variables.view.getPickedVertexState().getPicked());
        collapser.Expander(variables, filter, picked);
    }//GEN-LAST:event_ExpandActionPerformed
    /**
     * ================================================
     * Collapse Button
     * ================================================
     */
    private void CollapseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollapseActionPerformed
        //cannot use java generics type declarations with the graph collapser
        Collection picked = new HashSet(variables.view.getPickedVertexState().getPicked());
        collapser.Collapse(variables, filter, picked);
    }//GEN-LAST:event_CollapseActionPerformed
    /**
     * ================================================
     * Reset Button
     * ================================================
     */
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        collapser.ResetGraph(variables, filter);
    }//GEN-LAST:event_ResetActionPerformed
    /**
     * ================================================
     * Select Mouse mode Button
     * ================================================
     */
    private void MouseModesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MouseModesActionPerformed
        String mode = (String)MouseModes.getSelectedItem();
        if(mode.equalsIgnoreCase("Picking"))
        {
             mouse.setMode(ModalGraphMouse.Mode.PICKING);
        }
        if(mode.equalsIgnoreCase("Transforming"))
        {
             mouse.setMode(ModalGraphMouse.Mode.TRANSFORMING);
        }
    }//GEN-LAST:event_MouseModesActionPerformed
    /**
     * ================================================
     * Collapse Agent's processes
     * ================================================
     */
    private void CollapseAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollapseAgentActionPerformed
        PickedInfo<Object> picked_state;
        picked_state = variables.view.getPickedVertexState();
        Object node = null;
        //Get the selected node
        for(Object z : variables.layout.getGraph().getVertices())
        {
            if (picked_state.isPicked(z))
            {
                node = z;
            }
        }
        //Select the node and its neighbors to be collapsed
        if(variables.layout.getGraph().getNeighbors(node) != null)
        {
            Collection picked = new HashSet(variables.layout.getGraph().getNeighbors(node));
            picked.add(node);
            if(!(node instanceof SDM_AgentVertex)) 
            {
                picked.removeAll(picked);
            }   
            collapser.Collapse(variables, filter, picked);
        }
    }//GEN-LAST:event_CollapseAgentActionPerformed
    /**
     * ================================================
     * Set week granularity Button
     * ================================================
     */
    private void G7DaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_G7DaysActionPerformed
        collapser.ResetGraph(variables, filter);
        //Collapse agent's nodes 7 by 7
        for(Object z : variables.layout.getGraph().getVertices())
        {
            if(z instanceof SDM_AgentVertex)
            {
                collapser.Granularity(variables, filter, z, 7);
            }
        }      
    }//GEN-LAST:event_G7DaysActionPerformed
    /**
         * ================================================
         * Filtering credit edges
         * ================================================
         */
    private void FilterEdgeCreditsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeCreditsButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeCreditsButtonActionPerformed
    /**
         * ================================================
         * Filtering agent vertices
         * ================================================
         */
    private void FilterNodeAgentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterNodeAgentButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterNodeAgentButtonActionPerformed
    /**
         * ================================================
         * Filtering black Edges (edges with 0)
         * ================================================
         */
    private void FilterEdgeNeutralButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeNeutralButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeNeutralButtonActionPerformed
    /**
         * ================================================
         * Filtering lonely vertices
         * ================================================
         */
    private void FilterNodeLonelyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterNodeLonelyButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterNodeLonelyButtonActionPerformed
    /**
         * ================================================
         * Filtering Quality Edges
         * ================================================
         */
    private void FilterEdgeQualityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeQualityButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeQualityButtonActionPerformed
    /**
         * ================================================
         * Filtering Progress Edges
         * ================================================
         */
    private void FilterEdgeProgressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeProgressButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeProgressButtonActionPerformed
    /**
         * ================================================
         * Filtering Aid Edges
         * ================================================
         */
    private void FilterEdgeAidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeAidButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeAidButtonActionPerformed
    /**
         * ================================================
         * Filtering Val Edges
         * ================================================
         */
    private void FilterEdgeValButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeValButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeValButtonActionPerformed
    /**
         * ================================================
         * Filtering Discovery Edges
         * ================================================
         */
    private void FilterEdgeDiscoveryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeDiscoveryButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeDiscoveryButtonActionPerformed
    /**
         * ================================================
         * Filtering Prototype Edges
         * ================================================
         */
    private void FilterEdgeRepairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEdgeRepairButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_FilterEdgeRepairButtonActionPerformed
    /**
         * ================================================
         * Edge Shape: Make it to be a line instead of quadratic curves
         * ================================================
         */
    private void EdgeLineShapeSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeLineShapeSelectionActionPerformed
        String mode = (String)EdgeLineShapeSelection.getSelectedItem();
        if(mode.equalsIgnoreCase("QuadCurve"))
        {
             variables.view.getRenderContext().setEdgeShapeTransformer(new EdgeShape.QuadCurve<Object,Edge>());
        }
        if(mode.equalsIgnoreCase("Line"))
        {
             variables.view.getRenderContext().setEdgeShapeTransformer(new EdgeShape.Line<Object,Edge>());
        }
        variables.view.repaint();
    }//GEN-LAST:event_EdgeLineShapeSelectionActionPerformed

    /**
         * ================================================
         * Status Filter box
         * ================================================
         */
    private void StatusFilterBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusFilterBoxActionPerformed
        variables.SetMode((String)StatusFilterBox.getSelectedItem());
        SDM_VertexPainter.VertexPainter(variables.view, variables);
        variables.view.repaint();
    }//GEN-LAST:event_StatusFilterBoxActionPerformed
    /**
         * ================================================
         * Show edge text button
         * ================================================
         */
    private void ShowEdgeTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowEdgeTextButtonActionPerformed
        if(ShowEdgeTextButton.isSelected())
        {
           variables.view.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller<Edge>()); 
        }
        else
        {
            //Show nothing
            variables.view.getRenderContext().setEdgeLabelTransformer(new Transformer<Edge, String>() {

                @Override
                public String transform(Edge i) {
                    return "";
                }
            });
        }
        variables.view.repaint();
    }//GEN-LAST:event_ShowEdgeTextButtonActionPerformed
    /**
         * ================================================
         * Filter bug edges button
         * ================================================
         */
    private void EdgeFilterBugsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeFilterBugsButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_EdgeFilterBugsButtonActionPerformed
    /**
         * ================================================
         * Filter Test Case edges button
         * ================================================
         */
    private void EdgeFilterTCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeFilterTCButtonActionPerformed
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_EdgeFilterTCButtonActionPerformed
    
    private void EdgeFilterStaminaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeFilterStaminaButtonActionPerformed
        // TODO add your handling code here:
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_EdgeFilterStaminaButtonActionPerformed

    private void EdgeFilterMoraleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeFilterMoraleButtonActionPerformed
        // TODO add your handling code here:
        collapser.Filters(variables, filter);
    }//GEN-LAST:event_EdgeFilterMoraleButtonActionPerformed

    /**
     * ================================================
     * Init Graph Component
     * ================================================
     */
    private void initGraphComponent(DirectedGraph<Object, Edge> graph) {

        filter.filteredGraph = graph;
        variables.collapsedGraph = graph;
        filter.FilterInit();
        /**
         * ================================================
         * Choosing layout
         * ================================================
         */
//        layout = new SpringLayout2<Object, Edge>(graph);
        
//        Layout<Object, Edge> layout = new CircleLayout<Object, Edge>(graph);
//        layout = new FRLayout<Object, Edge>(graph);
        variables.layout = new SDM_Temporal_Layout<Object, Edge>(graph);
//        layout = new FRLayout2<Object, Edge>(graph);
//        Layout<Object, Edge> layout = new ISOMLayout<Object, Edge>(graph);
//        layout = new ISOMLayout<Object, Edge>(graph);
//        layout = new KKLayout<Object, Edge>(graph);
//        Layout<Object, Edge> layout = new StaticLayout<Object, Edge>(graph);
//        layout.setSize(new Dimension(2000, 2000));
        /**
         * ================================================
         * VisualizationViewer<Node, Edge> view = new VisualizationViewer<Node, Edge>(layout);
         * ================================================
         */
        variables.view = new VisualizationViewer<Object, Edge>(variables.layout);
        final ScalingControl scaler = new CrossoverScalingControl();
        scaler.scale(variables.view, 1/2.1f, variables.view.getCenter());

        variables.gCollapser = new GraphCollapser(graph);
        
        final PredicatedParallelEdgeIndexFunction eif = PredicatedParallelEdgeIndexFunction.getInstance();
        // ================================================
        //        final Set exclusions = new HashSet();
        //testing for edge collapse
        eif.setPredicate(new Predicate() {
            @Override
            public boolean evaluate(Object e) {

                    return exclusions.contains(e);
            }});
        // ================================================
        variables.view.getRenderContext().setParallelEdgeIndexFunction(eif);
        
        variables.view.setBackground(Color.white);
        this.getContentPane().add(variables.view, BorderLayout.CENTER);
        /**
         * ================================================
         * Adding interaction via mouse
         * Commands: t for translate, p for picking
         * ================================================
         */
//        DefaultModalGraphMouse mouse = new DefaultModalGraphMouse();
        variables.view.setGraphMouse(mouse);
        variables.view.addKeyListener(mouse.getModeKeyListener());
        /**
         * ================================================
         * Add a listener for ToolTips
         * ================================================
         */
        variables.view.setVertexToolTipTransformer(new ToStringLabeller() {
            @Override
            public String transform(Object v) {
                    if(v instanceof Graph) {
                            return ("<html>" + ((Graph)v).getVertices().toString() + "</html>");
                    }
                    return ("<html>" + v.toString() + "</html>");
                    //return super.transform(v);
            }});
        /**
         * ================================================
         * Edge Tooltip
         * ================================================
         */
        variables.view.setEdgeToolTipTransformer(new Transformer<Edge,String>(){
        @Override
            public String transform(Edge n) 
            {
                return n.getDetails();
            }
        });
        /**
         * ================================================
         * Labeling Vertex
         * ================================================
         */
//        view.getRenderContext().setVertexLabelTransformer(new ToStringLabeller<Node>());
        variables.view.getRenderContext().setVertexLabelTransformer(new Transformer<Object, String>() {

                @Override
                public String transform(Object v) {
                    if(v instanceof Graph) {
                        for(Object vertex : ((Graph)v).getVertices())
                        {
                            if(vertex instanceof SDM_AgentVertex) {
                                return "<html><font size=\"10\">" + ((Vertex)vertex).getName();
                            }
                        }    
                    }
                    if((v instanceof SDM_AgentVertex) || (v instanceof SDM_ClientVertex)) {
                        return "<html><font size=\"10\">" + ((Vertex)v).getName();
                    }
                    if(v instanceof SDM_ProjectVertex) {
                        return "<html><font size=\"10\">" + String.valueOf(((Vertex)v).getDate());
                    }
                    return "";
                }
            });
        
        /**
         * ================================================
         * Vertex Stroke
         * ================================================
         */
        Transformer<Object, Stroke> nodeStrokeTransformer =  new Transformer<Object, Stroke>() {
            @Override
            public Stroke transform(Object v) {
                return SDM_VertexStroke.VertexStroke(v, variables.view, variables.layout);
        }};
        variables.view.getRenderContext().setVertexStrokeTransformer(nodeStrokeTransformer);
        /**
         * ================================================
         * Edge Stroke
         * ================================================
         */
        variables.FindMax(graph);
        Transformer<Edge, Stroke> edgeStrokeTransformer =  new Transformer<Edge, Stroke>() {
            @Override
            public Stroke transform(Edge e) {
                return SDM_EdgeStroke.StrokeByType(e, variables);
            }
        };
        variables.view.getRenderContext().setEdgeStrokeTransformer(edgeStrokeTransformer);
        /**
         * ================================================
         * Vertex Paint
         * ================================================
         */
        SDM_VertexPainter.VertexPainter(variables.view, variables);
        /**
         * ================================================
         * Edge Paint
         * ================================================
         */
        Transformer edgePainter = new Transformer<Edge,Paint>() {
            @Override
            public Paint transform(Edge edge) {
                return edge.getColor();
            }
        };  
        variables.view.getRenderContext().setEdgeDrawPaintTransformer(edgePainter);
        variables.view.getRenderContext().setArrowDrawPaintTransformer(edgePainter);
        variables.view.getRenderContext().setArrowFillPaintTransformer(edgePainter);

        /**
         * ================================================
         * Node Shape
         * ================================================
         */
        variables.view.getRenderContext().setVertexShapeTransformer(new SDM_VertexShape());

        //graphicsContext.fill(shape);
        PreFilters.PreFilter();
        //Initialize selected filters from the GUI
        collapser.Filters(variables, filter);
    }
    
    /**
     * Get Graph from TSVReader
     * @param path
     * @return 
     */
    public static DirectedGraph<Object,Edge> getGraph(String path) {
        DirectedGraph<Object,Edge> g = new DirectedSparseMultigraph<Object,Edge>();
        try {
        //    try {
        //        TSVReader tsvReader = new TSVReader("log.txt");
                SDM_TSVReader tsvReader = new SDM_TSVReader(path);
        //        for (Node node : tsvReader.getNodes()) {
        //            graph.addVertex(node.getID());
        //        }
                for (Edge edge : tsvReader.getEdges()) {
        //            g.addEdge(edge, edge.getSource().getID(), edge.getTarget().getID());
                    g.addEdge(edge, edge.getSource(), edge.getTarget());
                }
        //    } catch (URISyntaxException | IOException ex) {
        //        Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
        //    }
            
        } catch (URISyntaxException ex) {
            Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return g;
}
    /**
     * Main
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional)">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    
                }
            }
        } catch (ClassNotFoundException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        Variables.graph = getGraph(filePath);
        java.awt.EventQueue.invokeLater(new Runnable() {
                
            @Override
                public void run() {
                    new GraphFrame(Variables.graph).setVisible(true);
                }
            });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Collapse;
    private javax.swing.JButton CollapseAgent;
    public static javax.swing.JCheckBox EdgeFilterBugsButton;
    public static javax.swing.JCheckBox EdgeFilterMoraleButton;
    public static javax.swing.JCheckBox EdgeFilterStaminaButton;
    public static javax.swing.JCheckBox EdgeFilterTCButton;
    private javax.swing.JComboBox EdgeLineShapeSelection;
    private javax.swing.JButton Expand;
    public static javax.swing.JCheckBox FilterEdgeAidButton;
    public static javax.swing.JCheckBox FilterEdgeCreditsButton;
    public static javax.swing.JCheckBox FilterEdgeDiscoveryButton;
    public static javax.swing.JCheckBox FilterEdgeNeutralButton;
    public static javax.swing.JCheckBox FilterEdgeProgressButton;
    public static javax.swing.JCheckBox FilterEdgeQualityButton;
    public static javax.swing.JCheckBox FilterEdgeRepairButton;
    public static javax.swing.JCheckBox FilterEdgeValButton;
    public static javax.swing.JCheckBox FilterNodeAgentButton;
    public static javax.swing.JCheckBox FilterNodeLonelyButton;
    private javax.swing.JButton G7Days;
    private javax.swing.JComboBox MouseModes;
    private javax.swing.JButton Reset;
    private javax.swing.JCheckBox ShowEdgeTextButton;
    private javax.swing.JComboBox StatusFilterBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
