<?xml version="1.0"?>
<!--
The MIT License

Copyright 2017 Kohwalter.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<xs:schema version="1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified">
    
    <xs:element name="config" type="configuration"/>
    
    <!-- Configuration Type -->
    <xs:complexType name="configuration">
        <xs:sequence>
            <!-- Define the vertex size in the graph. Default value is 15 -->
            <xs:element name="vertexSize" type="xs:string"/>
            <!-- Define the timeScale used in the timestamps: Nanoseconds, Microseconds, Milliseconds, Seconds, Minutes, Hours, Days, Weeks, SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss") -->
            <xs:element name="timeScale" type="xs:string"/> 
            <!-- The default layout used when loading the program -->
            <xs:element name="default_layout" type="xs:string"/>
            <!--Temporal layout parameters-->
            <xs:element name="temporalLayout" type="temporalLayout" minOccurs="1" maxOccurs="1"/>
            <!--Spatial layout parameters-->
            <xs:element name="spatialLayout" type="spatialLayout" minOccurs="1" maxOccurs="1"/>
            <!-- List of all edges and their configuration values -->
            <xs:element name="edgetype" type="edgetype" minOccurs="0" maxOccurs="unbounded"/>
            <!-- List of all vertices labels for filtering -->
            <xs:element name="vertexAttributeFilter" type="vertexAttributeFilter" minOccurs="0" maxOccurs="unbounded"/>
            <!-- List of all display modes -->
            <xs:element name="colorscheme" type="colorscheme" minOccurs="0" maxOccurs="unbounded"/>
            <!-- List of all special vertices that has different stroke -->
            <xs:element name="vertexstroke" type="vertexstroke" minOccurs="0" maxOccurs="unbounded"/>
            <!-- List of types of activity vertex and their configuration values -->
            <xs:element name="vertexcolor" type="vertexcolor" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
  
    <!-- String List -->
    <xs:simpleType name="stringlist">
        <xs:list itemType="xs:string"/>
    </xs:simpleType>
    
    <xs:complexType name="temporalLayout">
        <xs:sequence>
            <!-- Temporal Layout backbone vertex type -->
            <xs:element name="temporalLayoutbackbone" type="xs:string"/>
            <!-- Temporal Layout scale -->
            <xs:element name="temporalLayoutscale" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="spatialLayout">
        <xs:sequence>
            <!-- Spatial Layout X axis name -->
            <xs:element name="layoutAxis_X" type="xs:string"/>
            <!-- Spatial Layout Y axis name -->
            <xs:element name="layoutAxis_Y" type="xs:string"/>
            <!-- Spatial Layout Background Image location -->
            <xs:element name="imageLocation" type="xs:string"/>
            <!-- Spatial Layout Camera X position -->
            <xs:element name="imageOffset_X" type="xs:string"/>
            <!-- Spatial Layout Camera Y position -->
            <xs:element name="imageOffset_Y" type="xs:string"/>
            <!-- Spatial Layout Camera's upper left corner of the screen position in relation to the camera -->
            <xs:element name="spatialLayoutPosition" type="xs:string"/>
            <!-- Spatial Layout parameter used for Google Maps or OpenStreetMap image. Set value to zero if not using Google Maps image -->
            <xs:element name="zoomLevel" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
        
    <!-- Edge Type -->
    <xs:complexType name="edgetype">
        <xs:sequence>
            <xs:element name="edge" type="xs:string"/>
            <!-- Take MAX value or MEAN value for each edge type -->
            <xs:element name="edgestroke" type="xs:string"/>
            <!-- Collapse function used: True = multiplication; False = Add -->
            <xs:element name="collapsefunction" type="xs:string"/>
            <!-- Define if the color scheme for the edge is inverted (Inverted: Red = positive values, Green = negative values) -->
            <xs:element name="isInverted" type="xs:string"/>
            <!--Define the special color for this edge type-->
            <xs:element name="edgeColor" type="color"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- Vertex Label Filter -->
    <xs:complexType name="vertexAttributeFilter">
        <xs:sequence>
            <xs:element name="name" type="xs:string"/>
            <xs:element name="value" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
      
    <!-- Special Vertex Stroke -->
    <xs:complexType name="vertexstroke">
        <xs:sequence>
            <xs:element name="attribute" type="xs:string"/>
            <xs:element name="values" type="stringlist"/>
        </xs:sequence>
    </xs:complexType>  
    
    <!-- Mode Type -->
    <xs:complexType name="colorscheme">
        <xs:sequence>
            <xs:element name="attribute" type="xs:string"/>
            <xs:element name="class" type="xs:string"/>
            <xs:element name="trafficLightType" type="xs:string"/>
            <xs:element name="isInverted" type="xs:string"/>
            <xs:element name="values" type="stringlist"/>
            <xs:element name="goodvalue" type="xs:decimal" minOccurs="0" maxOccurs="1"/>
            <xs:element name="badvalue" type="xs:decimal" minOccurs="0" maxOccurs="1"/>
            <xs:element name="restrictedAttribute" type="stringlist"/>
            <xs:element name="restrictedValue" type="stringlist"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="vertexcolor">
        <xs:sequence>
            <xs:element name="generalname" type="xs:string"/>
            <xs:element name="activitycolor" type="activitycolor" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="entitycolor" type="entitycolor" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="agentcolor" type="agentcolor" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <!-- Activity Vertex Type -->
    <xs:complexType name="activitycolor">
        <xs:sequence>
            <xs:element name="attribute" type="xs:string"/>
            <xs:element name="value" type="xs:string"/>
            <xs:element name="vercolor" type="color"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="entitycolor">
        <xs:sequence>
            <xs:element name="attribute" type="xs:string"/>
            <xs:element name="value" type="xs:string"/>
            <xs:element name="vercolor" type="color"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="agentcolor">
        <xs:sequence>
            <xs:element name="attribute" type="xs:string"/>
            <xs:element name="value" type="xs:string"/>
            <xs:element name="vercolor" type="color"/>
        </xs:sequence>
    </xs:complexType>
        
<!-- Color Type -->
<xs:complexType name="color">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element name="r" type="xs:integer"/>
        <xs:element name="g" type="xs:integer"/>
        <xs:element name="b" type="xs:integer"/>
    </xs:sequence>
</xs:complexType>

</xs:schema>
